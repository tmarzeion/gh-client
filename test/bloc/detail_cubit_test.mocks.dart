// Mocks generated by Mockito 5.4.0 from annotations
// in ghclient/test/bloc/detail_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dio/dio.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:retrofit/retrofit.dart' as _i2;
import 'package:ghclient/services/client.dart' as _i8;
import 'package:ghclient/services/github_api_service.dart' as _i3;
import 'package:ghclient/services/models/pull_request.dart' as _i7;
import 'package:ghclient/services/models/repository.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHttpResponse_0<T> extends _i1.SmartFake
    implements _i2.HttpResponse<T> {
  _FakeHttpResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGitHubApiService_1 extends _i1.SmartFake
    implements _i3.GitHubApiService {
  _FakeGitHubApiService_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GitHubApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGitHubApiService extends _i1.Mock implements _i3.GitHubApiService {
  MockGitHubApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.HttpResponse<_i5.RepositoryResponse>> searchRepositories(
    String? query,
    int? page, [
    _i6.CancelToken? cancelToken,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchRepositories,
          [
            query,
            page,
            cancelToken,
          ],
        ),
        returnValue: _i4.Future<_i2.HttpResponse<_i5.RepositoryResponse>>.value(
            _FakeHttpResponse_0<_i5.RepositoryResponse>(
          this,
          Invocation.method(
            #searchRepositories,
            [
              query,
              page,
              cancelToken,
            ],
          ),
        )),
      ) as _i4.Future<_i2.HttpResponse<_i5.RepositoryResponse>>);
  @override
  _i4.Future<_i2.HttpResponse<List<_i7.PullRequest>>> getPullRequests(
    String? owner,
    String? repo,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPullRequests,
          [
            owner,
            repo,
          ],
        ),
        returnValue: _i4.Future<_i2.HttpResponse<List<_i7.PullRequest>>>.value(
            _FakeHttpResponse_0<List<_i7.PullRequest>>(
          this,
          Invocation.method(
            #getPullRequests,
            [
              owner,
              repo,
            ],
          ),
        )),
      ) as _i4.Future<_i2.HttpResponse<List<_i7.PullRequest>>>);
}

/// A class which mocks [GitHubApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockGitHubApiClient extends _i1.Mock implements _i8.GitHubApiClient {
  MockGitHubApiClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.GitHubApiService get githubApiService => (super.noSuchMethod(
        Invocation.getter(#githubApiService),
        returnValue: _FakeGitHubApiService_1(
          this,
          Invocation.getter(#githubApiService),
        ),
      ) as _i3.GitHubApiService);
  @override
  void initialize(_i6.Dio? dio) => super.noSuchMethod(
        Invocation.method(
          #initialize,
          [dio],
        ),
        returnValueForMissingStub: null,
      );
}
